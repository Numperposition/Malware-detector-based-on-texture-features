import matplotlib as mpl
import matplotlib.pyplot as plt
import numpy as np
import math
import sys, os, string, csv
from PIL import Image



def glcm_cal(glcm):
	row_num = glcm.shape[0]
	column_num = glcm.shape[1]
	asm = 0
	entropy = 0
	#correl = 0
	homo = 0
	
	ux = 0;
	uy = 0;
	
	
	for i in range(0, row_num):
		for j in range(0, column_num):
			ux += i * glcm[i][j]
			uy += j * glcm[i][j]
			asm += glcm[i][j] * glcm[i][j]
			if glcm[i][j] != 0:
				entropy += glcm[i][j] * math.log(glcm[i][j])
			homo += glcm[i][j] / (1 + abs(i - j))

	return asm, entropy, homo
	
def reduceGreyLevels(image, levels = 16):
	divisor = (256 / levels)
	lut = np.arange(256) / divisor
	return lut[image]
	
def calculateCoOccurrenceMatrix(offset, reduced_imag, levels):
		i = 0
		j = 0
		if offset[0] == -1 and offset[1] == -1:     
			rows = reduced_imag.shape[0] - 1
			columns = reduced_imag.shape[1] - 1
			i = 2
			j = 1
			
		else:                                       
			#central_pixel = reduced_imag[0, 0]
			rows = reduced_imag.shape[0] - offset[1]
			columns = reduced_imag.shape[1] - offset[0]
		
		glcm_matrix = np.zeros((levels, levels))
		pair_count = 0
		for row in range(i, rows):
			for column in range(j, columns):
				current_pixel = reduced_imag[row, column]
				offset_pixel = reduced_imag[row + offset[1], column + offset[0]]	
				
				# iterate between 0-15 in both dimensions to count the co-occurences for this pixel
				for mI in range(0, levels):
					for mJ in range(0, levels):
						if current_pixel == mI and offset_pixel == mJ:
							pair_count += 1
							glcm_matrix[mI, mJ] += 1
		glcm_matrix = glcm_matrix / pair_count
		return glcm_matrix

def extractFeatures(filename):
	img = Image.open(filename).convert('L')
	image = np.array(img)
	reduced_imag = reduceGreyLevels(image)
	
	glcm = calculateCoOccurrenceMatrix((-1, -1), reduced_imag, 16)
	
	values = glcm_cal(glcm)
	
	glcm = calculateCoOccurrenceMatrix((0, 1), reduced_imag, 16)
	values2 = glcm_cal(glcm)
	
	glcm = calculateCoOccurrenceMatrix((1, 0), reduced_imag, 16)
	values3 = glcm_cal(glcm)
	
	glcm = calculateCoOccurrenceMatrix((1, 1), reduced_imag, 16)
	values4 = glcm_cal(glcm)
	
	
	return values, values2, values3, values4


	
def calMeanVar(filename):
	valuesList = extractFeatures(filename)
	mean_asm = (valuesList[0][0] + valuesList[1][0] + valuesList[2][0] + valuesList[3][0])/4
	mean_entropy = (valuesList[0][1] + valuesList[1][1] + valuesList[2][1] + valuesList[3][1])/4
	mean_homo = (valuesList[0][2] + valuesList[1][2] + valuesList[2][2] + valuesList[3][2])/4
	
	return valuesList, mean_asm, mean_entropy, mean_homo



def output_features(filename):

	tempLine = []
	imageFeatureList = calMeanVar(filename)
	for kk in range(0, 4):
		for mm in range(0, 3):
			tempLine.append(str(imageFeatureList[0][kk][mm]))
	tempLine.append(str(imageFeatureList[1]))
	tempLine.append(str(imageFeatureList[2]))
	tempLine.append(str(imageFeatureList[3]))
	
	
	return tempLine
	
	
	