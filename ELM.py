#coding:UTF-8
#################
# ELM
# author : Bowen Xu, refer from zhiyong_will, 2015.3.22
# data: 2018.5.3
#################
from __future__ import division
from datetime import datetime
from math import exp
import random
from csv import DictReader
from numpy import *
import string
import time
import numpy as np


def sig(tData, Iw, bias, num):
	v = tData * Iw.T   
	bias_1 = ones((num, 1)) * bias
	v = v + bias_1
	H = 1./(1+exp(-v))
	return H
    
def training_process():
	trainData = "training_samples.csv"
	nHiddenNeurons = 100
	nInputNeurons = 15
	NO = 650
	print("number of neuron: %d" % nHiddenNeurons)
	firstTrainData = []
	firstTrainLable = []

	beta = 0

	t1 = time.time()
	time.sleep(1.5)
	for t, row in enumerate(DictReader(open(trainData))):
   
		data = []
	
		if t < NO: 
        
			if row['label'] == '0':
				y = 0
			elif row['label'] == '1':
				y = 1
			elif row['label'] == '2':
				y = 2
			elif row['label'] == '3':
				y = 3
			elif row['label'] == '4':
				y = 4
			else:
				y = 5
			del row['label']
		
			firstTrainLable.append(y)
			for key in row:
				value = float(row[key])
				data.append(value)  

			firstTrainData.append(data)  
		
			continue
		elif t == NO:
			p0 = mat(firstTrainData)   
			T0 = zeros((NO, 10))        
			for i in range(0, NO): 
				a = firstTrainLable[i]
				T0[i][a] = 1         
			T0 = T0 * 2 - 1
			Iw = mat(random.rand(nHiddenNeurons, nInputNeurons) * 2 - 1)
			bias = mat(random.rand(1, nHiddenNeurons))
			H0 = sig(p0, Iw, bias, NO)
			M = (H0.T * H0).I    
			beta = M * H0.T * T0 
		
		else:
			if row['label'] == '0':
				y = 0
			elif row['label'] == '1':
				y = 1
			elif row['label'] == '2':
				y = 2
			elif row['label'] == '3':
				y = 3
			elif row['label'] == '4':
				y = 4
			else:
				y = 5
			del row['label']
			Tn = zeros((1, 10))
			b = y
			Tn[0][b] = 1
			Tn = Tn * 2 - 1
			data = []
			for key in row:
				value = float(row[key])
				data.append(value)
			pn = mat(data)
			H = sig(pn, Iw, bias, 1)
		
			M = M - M * H.T * (eye(1,1) + H * M * H.T).I * H * M
		
			beta = beta + M * H.T * (Tn - H*beta)*0.01 #0.015
		

	t2 = time.time();
	print("time: %f"%(t2 - t1))
	return beta, Iw, bias

def judgeCategory(vector, beta, Iw, bias):

	data = []
	for i in range(0, len(vector)):
		value = float(vector[i])
		data.append(value)
    
	p = mat(data)
	HTrain = sig(p, Iw, bias, 1)
	Y = HTrain * beta
	return argmax(Y)
		

def testing_process(beta, Iw, bias):
	y = 0
	testData = "testing_samples.csv"
	correct = 0
	sum = 0
	accuracy_matrix = np.zeros((6, 6))
	for t, row in enumerate(DictReader(open(testData))):
		if row['label'] == '0':
			y = 0
		elif row['label'] == '1':
			y = 1
		elif row['label'] == '2':
			y = 2
		elif row['label'] == '3':
			y = 3
		elif row['label'] == '4':
			y = 4
		else:
			y = 5    
		del row['label']
		data = []
		for key in row:
			value = float(row[key])
			data.append(value)
    
		p = mat(data)
		HTrain = sig(p, Iw, bias, 1)
		Y = HTrain * beta
		num = argmax(Y)
		
		accuracy_matrix[y][num] += 1
		if num == y:
			correct += 1
		
		sum += 1
		
	accuracy = correct / sum
	print ("overall accuracy: %f" % accuracy)
	print("result:")
	print(accuracy_matrix)
